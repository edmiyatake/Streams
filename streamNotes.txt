INPUT / OUTPUT STREAMS
- An I/O stream can either be an input source and an output destination
- Streams can take in or spit out different kinds of data
- A stream is a sequence of data
- A program that uses an input stream reads in data from a source, one element at a time
- A program that uses an output stream would write data to a destination, one element at a time

Conceptually:
- Input streams would take in data from a source and apply it to a program
- Output streams take data from a program and send it to a destination

BYTE STREAMS
- Programs use Byte Streams to perform input and output operations on 8-bit bytes
- Byte Stream classes are descendants of InputStream and OutputStream classes

CHARACTER STREAMS
- Java stores character values as unicode conventions
- Character input/output streams automatically translate unicode -> ASCII
- For files with characters, it's usually simpler to use character streams over byte streams
    - due to the fact that it translates to ASCII automatically
- Character Streams are descendants or Reader and Writer classes
- Later on, since the format is already in characters, we can use BufferedReader and PrintWriter
- these classes help us take in large files by line instead of by character

BUFFERED STREAMS
- unbuffered streams indicate that each read/write request is hanndled by the underlying OS 
- this causes prgrams to be less efficient due to disk access/ network activity/ etc 
- A buffered stream reads data from a memory area called a buffer 
- buffered output stream can write data to a buffer 
- BufferedInputStream, BufferedOutputStream for buffered byte streams
- BufferedReader, Buffered Writer for buffered character streams
- buffers in output streams need to be flushed
